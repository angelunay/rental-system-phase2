/*
 * File: app/view/TransactionItemViewController.js
 *
 * This file was generated by Sencha Architect version 4.3.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 7.7.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 7.7.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MovieApp.view.TransactionItemViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.mrtransactionitem',

    config: {
        binding: {
            cboCustomerName: {
                value: '{current.strName}',
                origValueField: 'intUserId',
                store: '{name}'
            },
            cboStatus: {
                value: '{current.strStatus}',
                origValueField: 'intTransactionId}',
                store: '{transacStatus}' 
            },
            dtmRentDate: {
                value: '{current.dtmRentDate}'
            },
            txtRentId: {
                value: '{current.intTransactionId}'
            },

            gridRentDetails: {
                colRentId: {
                    dataIndex: 'intRentalId'
                },
                colMovieTitle: {
                    dataIndex: 'strMovieName',                    
                    editor: {
                        origValueField:'intMovieId',
                        store: '{title}'                        
                    }
                },
                colReturnDate: {
                    dataIndex: 'dtmReturnDate'
                },
                colStatus: {
                    dataIndex: 'strStatus',
                    editor: {
                        store: '{status}'   
                    }
                }
            }

        }
    },

    show: function(config) {
        "use strict";

        var me = this,
            win = me.getView(),
            action = config && config.action;

        if (action) {
            win.show();

            var context = win.context ? win.context.initialize() : me.setupContext();
            if (action == 'new') {
                context.data.addRecord();
            }
            else{
                context.data.load({
                    filters: config.filters
                })
            }
        }
    },

    //these are for the drilldown
    init: function(application){
        this.control({
            "#cboCustomerName":{
                drilldown: this.onCustomerDrilldown
            }
        })
    },
    onCustomerDrilldown: function(combo, value){
        win = combo.up('window');
        var current = win.getViewModel().data.current;
        var filter = {
            column : "intUserId",
            value: current.get('intUserId')
        };
        
        iRely.Functions.openScreen('MovieApp.view.UserModule', {
            action: 'view',
            filters: [filter],           
            
        })
        console.log(filter)
        console.log(current)
    },
    

    setupContext: function() {
        "use strict";

        var me = this,
            win = me.getView();

            win.context = Ext.create('iRely.Engine', {
                window : win,
                store  : Ext.create('MovieApp.store.TransactionItem', {pageSize: 1}),
                
                enableAudit: true,

                binding: me.config.binding,

                
                details: [{
                    key: 'tblMRRental',
                
                lazy: true,
                component: Ext.create('iRely.grid.Manager', {
                    grid: win.down('#gridRentDetails'),
                    deleteButton: win.down('#btnRemove')
                })
            }]
        });
        return win.context;
    }
});
